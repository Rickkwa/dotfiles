# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias vmi='vim'

alias tarunzip='tar -xvzf'
alias tarzip='tar -zcvf'

alias yumall='yum list available --showduplicates'

# Disable CTRL+S terminal pause
stty -ixon

docker() {
    if [[ $1 == "in" ]]; then
        shift
        command docker exec -it $@ bash
    elif [[ $1 == "ip" ]]; then
        shift
        command docker inspect -f '{{.NetworkSettings.IPAddress}}' $1
    elif [[ $1 == "rme" ]]; then
        exited=`docker ps -a | grep Exit | cut -d ' ' -f 1`
        command docker rm $exited
    elif [[ $1 == "tail" ]]; then
        shift
        command docker logs -f $@
    elif [[ $1 == "down" ]]; then
        shift
        command docker stop $@
        command docker rm $@
    else
        command docker $@
    fi
}

# SSH agent
load-ssh-agent() {
    if $(ps aux | grep '/usr/bin/ssh-agent' > /dev/null); then
        source ~/.ssh-agent.sh > /dev/null

        if ! ssh-add -l > /dev/null 2>&1; then
            ssh-agent -k > /dev/null
            rm -f ~/.ssh-agent.sh
        else
            return
        fi
    fi

    ssh-agent -s > ~/.ssh-agent.sh;
    source ~/.ssh-agent.sh
    ssh-add -t 10h ~/.ssh/prod_id_rsa
    if [ $? -ne 0 ]; then ssh-agent -k; fi
}

ssh() {
    if ! ssh-add -l > /dev/null 2>&1; then
        load-ssh-agent
    fi
    command ssh $@
}

function pssh {
    if [ $# -eq 0 ]; then
        echo "SSH into one or more hosts in separate tmux panes at once." >&2
        echo "Usage: pssh SERVER..." >&2
        return 1
    fi
    NUM_PANES=$#
    COMMANDS_FILE="/tmp/pssh-cmds-$(date +%s%N)"
    if [ -z "$TMUX" ]; then
        echo "tmux new-session -d" >> $COMMANDS_FILE
    else
        echo "Please run this outside of an existing tmux session" >&2
        return 1
    fi
    echo "tmux selectp -t 0" >> $COMMANDS_FILE

    i=1
    for TARGET in "$@"; do
        echo "tmux send-keys \"ssh '$TARGET'\" enter" >> $COMMANDS_FILE

        if [ $(($i % 4)) -eq 0 ]; then
            echo "tmux select-layout tiled" >> $COMMANDS_FILE
        fi
        # only add panes if we aren't at the last one
        # new pane gets focus for next send-keys call
        if [ $i -lt $NUM_PANES ]; then
            echo "tmux splitw -h -p 50" >> $COMMANDS_FILE # Add a new pane
        fi
        i=$(( i + 1 ))
    done
    # Adjust the layout to homogeneize the panes
    echo "tmux select-layout tiled" >> $COMMANDS_FILE
    # Come back to the original pane
    echo "tmux selectp -t 0" >> $COMMANDS_FILE
    echo "tmux set-window-option synchronize-panes" >> $COMMANDS_FILE
    if [ -z "$TMUX" ]; then
        echo "tmux -2 attach-session -d" >> $COMMANDS_FILE
    fi
    #echo $COMMANDS_FILE
    #cat $COMMANDS_FILE
    source "$COMMANDS_FILE" #&& rm -f "$COMMANDS_FILE"
}

# https://serverfault.com/a/3842/399488
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

#export PS1='\[\033[1;34m\][\A][\u@\h \W]\$\[\033[0m\] '
PROMPT_COMMAND=__prompt_command
__prompt_command() {
    local EXIT_CODE="$?"  # Has to be first line to capture exit code
    local CLR_NORMAL="\[\033[0m\]"
    local CLR_WHITE="\[\033[37;1m\]"
    local CLR_RED="\[\033[31;1m\]"
    local CLR_BLUE="\[\033[1;34m\]"
    local CLR_YELLOW="\[\033[33;1m\]"

    local EXIT="${CLR_BLUE}`if [ $EXIT_CODE -ne 0 ]; then echo $CLR_RED; fi`::"
    local UID_INDICATOR="${CLR_WHITE}\$"
    local TIMESTAMP="${CLR_YELLOW}[\A]"
    local MAIN="${CLR_YELLOW} \h \W "
    export PS1="${TIMESTAMP}${MAIN}${EXIT}${UID_INDICATOR}${CLR_NORMAL} "
}

export TERM=cygwin
export HISTTIMEFORMAT='%F %T '
IGNOREEOF=1
FIGNORE=".pyc:.retry"

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
