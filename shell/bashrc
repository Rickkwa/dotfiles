# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias vmi='vim'

alias tarunzip='tar -xvzf'
alias tarzip='tar -zcvf'

alias yumall='yum list available --showduplicates'

# Disable CTRL+S terminal pause
stty -ixon

docker() {
    if [[ $1 == "in" ]]; then
        shift
        command docker exec -it $@ bash
    elif [[ $1 == "ip" ]]; then
        shift
        command docker inspect -f '{{.NetworkSettings.IPAddress}}' $1
    elif [[ $1 == "rme" ]]; then
        exited=`docker ps -a | grep Exit | cut -d ' ' -f 1`
        command docker rm $exited
    elif [[ $1 == "tail" ]]; then
        shift
        command docker logs -f $@
    elif [[ $1 == "down" ]]; then
        shift
        command docker stop $@
        command docker rm $@
    else
        command docker $@
    fi
}

tmux() {
    if [[ $1 == "go" ]]; then
        shift
        command tmux a -t $@
    else
        command tmux $@
    fi
}

# SSH agent
load-ssh-agent() {
    if $(ps aux | grep '/usr/bin/ssh-agent' > /dev/null); then
        source ~/.ssh-agent.sh > /dev/null

        if ! ssh-add -l > /dev/null 2>&1; then
            ssh-agent -k > /dev/null
            rm -f ~/.ssh-agent.sh
        else
            return
        fi
    fi

    ssh-agent -s > ~/.ssh-agent.sh;
    source ~/.ssh-agent.sh
    ssh-add -t 10h ~/.ssh/prod_id_rsa
    if [ $? -ne 0 ]; then ssh-agent -k; fi
}

ssh() {
    if ! ssh-add -l > /dev/null 2>&1; then
        load-ssh-agent
    fi
    command ssh $@
}

function pssh {
    if [ $# -eq 0 ]; then
        echo "Expecting one or more hosts" >&2
        exit 1
    else
        NUM_PANES=$#
        SESSION_NAME=$(date '+%Y%m%d_%H%M%S')
        TMUX_COMMAND="tmux new-session -s '$SESSION_NAME' \; "
        TMUX_COMMAND=${TMUX_COMMAND}"selectp -t 0 \; "

        i=1
        for TARGET in "$@"; do
            TMUX_COMMAND=${TMUX_COMMAND}"send-keys 'ssh $TARGET' enter \; "
            # TMUX_COMMAND=${TMUX_COMMAND}"send-keys 'echo $TARGET' enter \; "
            # TODO custom user, or ssh options

            if [ $(($i % 4)) -eq 0 ]; then
                TMUX_COMMAND=${TMUX_COMMAND}"select-layout tiled \; "
            fi
            # only add panes if we aren't at the last one
            # new pane gets focus for next send-keys call
            if [ $i -lt $NUM_PANES ]; then
                TMUX_COMMAND=${TMUX_COMMAND}"splitw -h -p 50 \; " # Add a new pane
            fi
            i=$(( i + 1 ))
        done
        # Adjust the layout to homogeneize the panes
        TMUX_COMMAND=${TMUX_COMMAND}"select-layout tiled \; "
        # Come back to the original pane
        TMUX_COMMAND=${TMUX_COMMAND}"selectp -t 0 \; "
        TMUX_COMMAND=${TMUX_COMMAND}"attach"
    fi
    eval "$TMUX_COMMAND";
}

# https://serverfault.com/a/3842/399488
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

#export PS1='\[\033[1;34m\][\A][\u@\h \W]\$\[\033[0m\] '
PROMPT_COMMAND=__prompt_command
__prompt_command() {
    local EXIT_CODE="$?"  # Has to be first line to capture exit code
    local CLR_NORMAL="\[\033[0m\]"
    local CLR_WHITE="\[\033[37;1m\]"
    local CLR_RED="\[\033[31;1m\]"
    local CLR_BLUE="\[\033[1;34m\]"
    local CLR_YELLOW="\[\033[33;1m\]"

    local EXIT="${CLR_BLUE}`if [ $EXIT_CODE -ne 0 ]; then echo $CLR_RED; fi`::"
    local UID_INDICATOR="${CLR_WHITE}\$"
    local TIMESTAMP="${CLR_YELLOW}[\A]"
    local MAIN="${CLR_YELLOW} \h \W "
    export PS1="${TIMESTAMP}${MAIN}${EXIT}${UID_INDICATOR}${CLR_NORMAL} "
}

export TERM=cygwin
FIGNORE=".pyc:.retry"

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
